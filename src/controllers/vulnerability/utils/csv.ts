import { writeFile } from "fs/promises";
import { VulnerabilityCommonModelServiceResult } from "../../../services/vulnerability";
import { SingleTransitCollisionRiskControllerResult } from "../single-transit-risk";
import { stringify } from "csv-stringify/sync";
import * as path from "path";

export const writeOverallVulnerabilityCsv = async (
  results:
    | {
        single: SingleTransitCollisionRiskControllerResult;
        allExtended: VulnerabilityCommonModelServiceResult;
        allSingle?: VulnerabilityCommonModelServiceResult;
        timeOfWorkPerMonth?: number[];
        birdDensitiesPerMonth: number[];
      }
    | {
        single: SingleTransitCollisionRiskControllerResult;

        allExtended?: VulnerabilityCommonModelServiceResult;
        allSingle: VulnerabilityCommonModelServiceResult;
        timeOfWorkPerMonth?: number[];
        birdDensitiesPerMonth: number[];
      },
  filename: string
) => {
  const monthsHeader = totalCsvRow({
    values: [
      "Jan",
      "Dec",
      "Feb",
      "March",
      "Apr",
      "May",
      "June",
      "July",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ],
    total: "Year average",
  });
  const timeOfWorkPerMonth = results.timeOfWorkPerMonth
    ? new Array(12)
        .fill(0)
        .map((it, index) => results.timeOfWorkPerMonth?.[index] || 0)
    : new Array(12).fill(1);
  const averageTimeOfWork = timeOfWorkPerMonth.reduce(
    (acc, it) => acc + it / 12,
    0
  );
  const birdDensitiesPerMonth = new Array(12)
    .fill(0)
    .map((it, index) => results.birdDensitiesPerMonth[index] || 0);
  const table: (string | number)[][] = [monthsHeader];
  table.push(
    totalCsvRow({
      values: timeOfWorkPerMonth.map((it, index) => Math.round(it * 100) + "%"),
      total: Math.round(averageTimeOfWork * 100) + "%",
    })
  );

  table.push(totalCsvRow({ baseTitle: "Stage A - flight activity" }));
  table.push(
    totalCsvRow({
      title: "Daytime areal bird density",
      unit: "birds/sq km",

      values: birdDensitiesPerMonth,
    })
  );
  const fluxFactorsPerMonth = (results.allSingle || results.allExtended)!
    .fluxFactorsPerMonth;

  const dayHoursPerMonth = (results.allSingle || results.allExtended)!
    .dayHoursPerMonth;

  const nightHoursPerMonth = (results.allSingle || results.allExtended)!
    .nightHoursPerMonth;
  table.push(totalCsvRow({ title: "Proportion at rotor height" }));
  table.push(
    totalCsvRow({
      title: "Total daylight hours per month",
      unit: "hrs",
      values: dayHoursPerMonth,
    })
  );

  table.push(
    totalCsvRow({
      title: "Total night hours per month",
      unit: "hrs",
      values: nightHoursPerMonth,
    })
  );
  table.push(
    totalCsvRow({
      title: "Flux factor",
      values: fluxFactorsPerMonth,
    })
  );

  table.push(totalCsvRow({}));
  if (results.allSingle) {
    table.push(totalCsvRow({ baseTitle: "Basic model" }));
    table.push(
      totalCsvRow({
        title: "Potential bird transits through rotors",
        unit: "",
        values: results.allSingle?.potentialTransitsPerMonth,
      })
    );
    table.push(
      totalCsvRow({
        title: "Collision risk for single rotor transit",
        unit: "",
        singleValue: results.single.total * 100 + "%",
      })
    );

    table.push(
      totalCsvRow({
        title:
          "Collisions for entire windfarm, allowing for non-op time, assuming no avoidance",
        unit: "",
        values: results.allSingle.potentialCollisionsPerMonth,
        total: results.allSingle.potentialCollisionsPerMonth.reduce(
          (a, b) => a + b
        ),
      })
    );
  }

  await writeFile(path.join(filename, "overall.csv"), await stringify(table));
};
const totalCsvRow = ({
  title,
  unit,
  singleValue,
  values,
  total,
  baseTitle,
}: {
  baseTitle?: string | number;
  title?: number | string;
  unit?: number | string;
  singleValue?: number | string;
  values?: (number | string)[];
  total?: number | string;
}) => {
  const allValues = new Array(12)
    .fill("")
    .map((it, index) => values?.[index] ?? "");
  return [
    baseTitle ?? "",
    title ?? "",
    singleValue ?? "",
    ...allValues,
    "",
    total ?? "",
  ];
};
