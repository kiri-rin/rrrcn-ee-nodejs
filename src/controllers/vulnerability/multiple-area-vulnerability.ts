import {
  BirdCollisionConfigType,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "../../services/vulnerability/types";
import { CommonConfig } from "../../analytics_config_types";
import { flightHeightTransitRisk } from "./flight-height-transit-risk";
import type { FlightHeightTransitRiskResponse } from "./flight-height-transit-risk";
import { Polygon } from "@turf/helpers";
import * as path from "path";
import { singleTransitCollisionRiskController } from "./single-transit-risk";
import { vulnerabilityCommonModelService } from "../../services/vulnerability";
import { getLightDayLengthPerMonth } from "../../utils/light-day";
import { center } from "@turf/turf";
import { writeOverallVulnerabilityCsv } from "./utils/csv";

export interface MultipleAreaVulnerabilityRequest extends CommonConfig {
  areas: {
    id: number | string;
    area: GeoJSON.Feature<Polygon>;
    flightheights: [number, number][];
    percentAtRotorHeight: number;
    birdDensitiesPerMonth?: number[];
  }[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
}
const avoidanceRates: number[] = [];
export const multipleAreaVulnerabilityController = async ({
  areas,
  birdConfig,
  outputs,
  updownProportion,
  windfarmConfig,
  windfarmInstanceConfig,
  xinc,
  yinc,
}: MultipleAreaVulnerabilityRequest) => {
  if (!outputs) return;
  let result: { [p: string]: FlightHeightTransitRiskResponse | any } = {};
  for (let {
    area,
    flightheights,
    percentAtRotorHeight,
    birdDensitiesPerMonth,
    id,
  } of areas) {
    const areaPath = path.join(outputs, String(id));
    const extended =
      flightheights.length > 1 &&
      (await flightHeightTransitRisk({
        birdConfig,
        outputs: path.join(outputs, String(id)),
        updownProportion,
        windfarmConfig,
        windfarmInstanceConfig,
        xinc,
        yinc,
        area,
        flightheights,
      }));
    const single = await singleTransitCollisionRiskController({
      birdConfig,
      outputs: path.join(outputs, String(id)),
      updownProportion,
      windfarmConfig,
      windfarmInstanceConfig,
      xinc,
      yinc,
      area,
    });
    result[id] = { extended, single };
    const { dayHoursPerMonth, nightHoursPerMonth } = getLightDayLengthPerMonth(
      center(area.geometry).geometry
    ).reduce(
      (acc, { nightHours, dayHours }) => {
        acc.dayHoursPerMonth.push(dayHours);
        acc.nightHoursPerMonth.push(nightHours);
        return acc;
      },
      {
        dayHoursPerMonth: [] as number[],
        nightHoursPerMonth: [] as number[],
      }
    );
    if (birdDensitiesPerMonth) {
      const allSingle =
        (single &&
          percentAtRotorHeight &&
          vulnerabilityCommonModelService({
            collisionRisk: single.total,
            fluxRate: percentAtRotorHeight,
            avoidanceRates,
            birdConfig,
            birdDensitiesPerMonth,
            dayHoursPerMonth,
            nightHoursPerMonth,
            updownProportion,
            windfarmConfig,
            windfarmInstanceConfig,
            xinc,
            yinc,
          })) ||
        undefined;

      const allExtended =
        (extended &&
          vulnerabilityCommonModelService({
            collisionRisk: extended.collisionIntegral,
            fluxRate: extended.fluxIntegral,
            avoidanceRates,
            birdConfig,
            birdDensitiesPerMonth,
            dayHoursPerMonth,
            nightHoursPerMonth,
            updownProportion,
            windfarmConfig,
            windfarmInstanceConfig,
            xinc,
            yinc,
          })) ||
        undefined;
      (allExtended || allSingle) &&
        (await writeOverallVulnerabilityCsv(
          {
            birdDensitiesPerMonth,
            timeOfWorkPerMonth: windfarmInstanceConfig.timeOfWorkPerMonth,
            single,
            allExtended: allExtended,
            allSingle: allSingle!,
          },
          `${areaPath}`
        ));
    }
  }
  return result;
};
