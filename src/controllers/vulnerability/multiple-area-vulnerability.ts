import {
  BirdCollisionConfigType,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "../../services/vulnerability/types";
import { CommonConfig } from "../../analytics_config_types";
import { flightHeightTransitRisk } from "./flight-height-transit-risk";
import type { FlightHeightTransitRiskResponse } from "./flight-height-transit-risk";
import { Polygon } from "@turf/helpers";
import * as path from "path";
import { singleTransitCollisionRiskController } from "./single-transit-risk";

export interface MultipleAreaVulnerabilityRequest extends CommonConfig {
  areas: {
    id: number | string;
    area: GeoJSON.Feature<Polygon>;
    flightheights: [number, number][];
    percentAtRotorHeight: number;
  }[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
}

export const multipleAreaVulnerabilityController = async ({
  areas,
  birdConfig,
  outputs,
  updownProportion,
  windfarmConfig,
  windfarmInstanceConfig,
  xinc,
  yinc,
}: MultipleAreaVulnerabilityRequest) => {
  if (!outputs) return;
  let result: { [p: string]: FlightHeightTransitRiskResponse | any } = {};
  for (let { area, flightheights, id } of areas) {
    const extended =
      flightheights.length > 1 &&
      (await flightHeightTransitRisk({
        birdConfig,
        outputs: path.join(outputs, String(id)),
        updownProportion,
        windfarmConfig,
        windfarmInstanceConfig,
        xinc,
        yinc,
        area,
        flightheights,
      }));
    const single = await singleTransitCollisionRiskController({
      birdConfig,
      outputs: path.join(outputs, String(id)),
      updownProportion,
      windfarmConfig,
      windfarmInstanceConfig,
      xinc,
      yinc,
      area,
    });
    result[id] = { extended, single };
  }
  return result;
};
