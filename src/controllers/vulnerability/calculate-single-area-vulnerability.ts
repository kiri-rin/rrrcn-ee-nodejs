import { VulnerabilitySingleAreaConfig } from "./types";
import {
  interpolate,
  xareasum2,
  xrisksum2,
  ydistsum,
} from "../../services/vulnerability/base_functions";
import { writeAreaVulnerabilityIntegralCsv } from "./utils/csv";
import { IntegralAreaCollisionConfig } from "../../services/vulnerability/types";

export const calculateSingleAreaVulnerability = async (
  config: VulnerabilitySingleAreaConfig
) => {
  const {
    outputs,
    windfarmConfig,
    birdConfig,
    windfarmInstanceConfig,
    xinc,
    yinc,
    updown,
    flag,
    flightsData,
  } = config;
  const configs: IntegralAreaCollisionConfig = {
    windfarmInstanceConfig,
    windfarmConfig,
    birdConfig,
    flightheights: (
      Object.entries(
        flightsData.reduce((acc, { elevation }) => {
          acc[Math.round(elevation)] = acc[Math.round(elevation)]
            ? acc[Math.round(elevation)] + 1
            : 1;
          return acc;
        }, {} as { [p: number]: number })
      ).map((it) => [Number(it[0]), it[1] / flightsData.length]) as [
        number,
        number
      ][]
    ).sort((a, b) => (a[0] < b[0] ? -1 : 1)),
  };
  const totalRiskUp = ydistsum(xinc, yinc, "up", configs, flag);
  const totalRiskDown = ydistsum(xinc, yinc, "down", configs, flag);
  const yScale = [
    -1,
    ...Array(Math.ceil(2 / yinc) - 1)
      .fill(0)
      .map((it, index) => -1 + (index + 1) * yinc),
    1,
  ];
  const results = yScale.map((y) => {
    const xrisksumUp = xrisksum2(y, xinc, "up", windfarmConfig, birdConfig);
    const xrisksumDown = xrisksum2(
      y,
      xinc,
      "down",
      configs.windfarmConfig,
      configs.birdConfig
    );
    const dy =
      interpolate(
        configs.flightheights,
        configs.windfarmInstanceConfig.hubheight +
          configs.windfarmConfig.radius * y +
          configs.windfarmInstanceConfig.offset
      ) * configs.windfarmConfig.radius;
    const dyRiskUp = dy * xrisksumUp;
    const dyRiskDown = dy * xrisksumDown;
    return { y, dy, xrisksumUp, xrisksumDown, dyRiskUp, dyRiskDown };
  });
  await writeAreaVulnerabilityIntegralCsv(
    { rows: results, totalRiskDown, totalRiskUp },
    `${outputs}/totalRisk.csv`
  );
  return { rows: results, totalRiskDown, totalRiskUp };
};
