import {
  BirdCollisionConfigType,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "./types";
import { pcoll } from "./base_functions";

export type SingleTransitCollisionRiskConfig = {
  updown: "up" | "down";
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
};
export const singleTransitCollisionRisk = (
  config: SingleTransitCollisionRiskConfig
) => {
  const { xinc } = config;
  const xmax = Math.ceil(1 / xinc);
  const wingspan =
    config.birdConfig.wingspan *
    (config.birdConfig.flight_type === "gliding" ? 2 / Math.PI : 1);
  const results = [
    pcoll(
      0,
      config.windfarmConfig.pitch,
      config.updown,
      config.windfarmConfig,
      config.birdConfig
    ),
  ];
  let total = 0;
  for (let i = 1; i < xmax; i++) {
    const { alpha, colllength, pcollision } = pcoll(
      i * xinc,
      0,
      config.updown,
      config.windfarmConfig,
      { ...config.birdConfig, wingspan }
    );
    results.push({ alpha, colllength, pcollision });
    total += 2 * pcollision * xinc * xinc * i;
  }
  const { alpha, colllength, pcollision } = pcoll(
    1,
    0,
    config.updown,
    config.windfarmConfig,
    { ...config.birdConfig, wingspan }
  );
  total += (pcollision * xinc) / 2;
  results.push({ alpha, colllength, pcollision });
  return { total, results };
};
