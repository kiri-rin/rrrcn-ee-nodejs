import {
  BirdCollisionConfigType,
  IntegralAreaCollisionConfig,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "./types";
import { ydistsum } from "./base_functions";
const COMMON_AVOIDANCE_RATES = [0.96, 0.98, 0.99, 0.995];
type VulnerabilityModelCommonConfig = {
  birdDensitiesPerMonth: number[];
  dayHoursPerMonth: number[];
  nightHoursPerMonth: number[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
  avoidanceRates: number[];
};
type VulnerabilityExtendedModelConfig = VulnerabilityModelCommonConfig & {
  flightheights: [number, number][];
};
type VulnerabilityBaseModelConfig = VulnerabilityModelCommonConfig & {
  proportionAtRotorHeight: number;
};

export const vulnerabilityCommonModelService = (
  config: VulnerabilityModelCommonConfig & {
    fluxRate: number;
    collisionRisk: number;
  }
) => {
  const {
    windfarmConfig,
    birdConfig,
    windfarmInstanceConfig,
    nightHoursPerMonth,
    dayHoursPerMonth,
    birdDensitiesPerMonth,
  } = config;

  const windfarmFrontalArea =
    windfarmConfig.numberOfTurbines *
    2 *
    Math.PI *
    (windfarmConfig.radius * windfarmConfig.radius);

  const fluxFactorsPerMonth = birdDensitiesPerMonth.map((density, index) => {
    return (
      (((birdConfig.speed * density) / (2 * windfarmConfig.radius)) *
        windfarmFrontalArea *
        (dayHoursPerMonth[index] +
          nightHoursPerMonth[index] * birdConfig.nocturnalActivity) *
        3600) /
      1000000
    );
  });
  const potentialTransitsPerMonth = fluxFactorsPerMonth.map((fluxFactor) => {
    return fluxFactor * config.fluxRate;
  });
  const potentialCollisionsPerMonth = fluxFactorsPerMonth.map(
    (fluxFactor, index) => {
      return (
        fluxFactor *
        config.collisionRisk *
        (windfarmInstanceConfig?.timeOfWorkPerMonth?.[index] || 1)
      );
    }
  );
  const collisionsAssumingAvoidance = [
    ...COMMON_AVOIDANCE_RATES,
    ...(config.avoidanceRates || []),
  ].reduce((acc, avoidanceRate) => {
    acc[avoidanceRate] = potentialCollisionsPerMonth.map(
      (collisionRisk) => collisionRisk * avoidanceRate
    );
    return acc;
  }, {} as { [p: number]: number[] });
  return {
    collisionsAssumingAvoidance,
    potentialCollisionsPerMonth,
    potentialTransitsPerMonth,
  };
};

export const vulnerabilityExtendedModelService = (
  config: VulnerabilityExtendedModelConfig
) => {
  const {
    windfarmConfig,
    birdConfig,
    windfarmInstanceConfig,
    flightheights,
    xinc,
    yinc,
  } = config;
  const integralConfig = {
    windfarmConfig,
    birdConfig,
    windfarmInstanceConfig,
    flightheights,
  };
  const fluxIntegralUp = ydistsum(xinc, yinc, "up", integralConfig, 1);
  const fluxIntegralDown = ydistsum(xinc, yinc, "down", integralConfig, 1);
  const fluxIntegral =
    fluxIntegralUp * config.updownProportion +
    (1 - config.updownProportion) * fluxIntegralDown;

  const collisionIntegralUp = ydistsum(xinc, yinc, "up", integralConfig, 0);
  const collisionIntegralDown = ydistsum(xinc, yinc, "down", integralConfig, 0);
  const collisionIntegral =
    collisionIntegralUp * config.updownProportion +
    (1 - config.updownProportion) * collisionIntegralDown;

  return vulnerabilityCommonModelService({
    ...config,
    fluxRate: fluxIntegral,
    collisionRisk: collisionIntegral,
  });
};
export const vulnerabilityBaseModelService = (
  config: VulnerabilityBaseModelConfig
) => {
  const {
    windfarmConfig,
    birdConfig,
    windfarmInstanceConfig,
    proportionAtRotorHeight,
  } = config;
  const integralConfig = {
    windfarmConfig,
    birdConfig,
    windfarmInstanceConfig,
  };
  //
  // return vulnerabilityBaseModelService({
  //   ...config,
  //   fluxRate: fluxIntegral,
  //   collisionRisk: config.collisionIntegral,
  // });
};
